using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using HopfieldNetwork.Mathematics;
using HopfieldNetwork.Exceptions;
using HopfieldNetwork.Memory;
using HopfieldNetworkTesting.Mathematics;

namespace HopfieldNetworkTesting.Memory
{
    [TestClass]
    public class MemoryTest
    {
        [TestMethod]
        public void AddPatternTest()
        {
            var memory = new HopfieldMemory(5,5);
            memory.AddPattern(this.GetLetterT());
            memory.AddPattern(this.GetLetterA());
            memory.AddPattern(this.GetLetterC());

            var hopfieldMemoryMatrix = memory.WeightMatrix;
            var expectedMemoryMatrix = this.GetWeightMatrixTAC();

            var isTrue = Helpers.AreEqualMatrix(expectedMemoryMatrix, hopfieldMemoryMatrix);

            Assert.IsTrue(isTrue);
        }


        [TestMethod]
        public void DeletePatternTest()
        {
            var memory = new HopfieldMemory(5,5);
            memory.AddPattern(this.GetLetterT());
            memory.AddPattern(this.GetLetterA());
            memory.AddPattern(this.GetLetterC());

            memory.DeletePattern("A");
            memory.DeletePattern("C");

            var hopfieldMemoryMatrix = memory.WeightMatrix;
            var expectedMemoryMatrix = this.GetWeightMatrixT();

            var isTrue = Helpers.AreEqualMatrix(expectedMemoryMatrix, hopfieldMemoryMatrix);

            Assert.IsTrue(isTrue);
        }



        private Pattern GetLetterT()
        {
            var patternT = new Pattern("T", new double[,]
            {
                { 1, 1, 1, 1, 1 },
                { -1, -1, 1, -1, -1 },
                { -1, -1, 1, -1, -1 },
                { -1, -1, 1, -1, -1 },
                { -1, -1, 1, -1, -1 }
            });

            return patternT;
        }


        private Pattern GetLetterA()
        {
            var patternA = new Pattern("A", new double[,]
            {
                { 1, 1, 1, 1, 1 },
                { 1, -1, -1, -1, 1 },
                { 1, 1, 1, 1, 1 },
                { 1, -1, -1, -1, 1 },
                { 1, -1, -1, -1, 1 }
            });

            return patternA;
        }

        private Pattern GetLetterC()
        {
            var patternA = new Pattern("C", new double[,]
            {
                { 1, 1, 1, 1, 1 },
                { 1, -1, -1, -1, -1 },
                { 1, -1, -1, -1, -1 },
                { 1, -1, -1, -1, -1 },
                { 1, 1, 1, 1, 1 }
            });

            return patternA;
        }


        private Matrix GetWeightMatrixT()
        {
            var matrixT = new Matrix(new double[,]
            {
                { 1,  1,  1,  1,  1,  -1, -1, 1,  -1, -1, -1, -1, 1,  -1, -1, -1, -1, 1,  -1, -1, -1, -1, 1,  -1, -1 },
                { 1,  1,  1,  1,  1,  -1, -1, 1,  -1, -1, -1, -1, 1,  -1, -1, -1, -1, 1,  -1, -1, -1, -1, 1,  -1, -1 },
                { 1,  1,  1,  1,  1,  -1, -1, 1,  -1, -1, -1, -1, 1,  -1, -1, -1, -1, 1,  -1, -1, -1, -1, 1,  -1, -1 },
                { 1,  1,  1,  1,  1,  -1, -1, 1,  -1, -1, -1, -1, 1,  -1, -1, -1, -1, 1,  -1, -1, -1, -1, 1,  -1, -1 },
                { 1,  1,  1,  1,  1,  -1, -1, 1,  -1, -1, -1, -1, 1,  -1, -1, -1, -1, 1,  -1, -1, -1, -1, 1,  -1, -1 },
                { -1, -1, -1, -1, -1, 1,  1,  -1, 1,  1,  1,  1,  -1, 1,  1,  1,  1,  -1, 1,  1,  1,  1,  -1, 1,  1 },
                { -1, -1, -1, -1, -1, 1,  1,  -1, 1,  1,  1,  1,  -1, 1,  1,  1,  1,  -1, 1,  1,  1,  1,  -1, 1,  1 },
                { 1,  1,  1,  1,  1,  -1, -1, 1,  -1, -1, -1, -1, 1,  -1, -1, -1, -1, 1,  -1, -1, -1, -1, 1,  -1, -1 },
                { -1, -1, -1, -1, -1, 1,  1,  -1, 1,  1,  1,  1,  -1, 1,  1,  1,  1,  -1, 1,  1,  1,  1,  -1, 1,  1 },
                { -1, -1, -1, -1, -1, 1,  1,  -1, 1,  1,  1,  1,  -1, 1,  1,  1,  1,  -1, 1,  1,  1,  1,  -1, 1,  1 },
                { -1, -1, -1, -1, -1, 1,  1,  -1, 1,  1,  1,  1,  -1, 1,  1,  1,  1,  -1, 1,  1,  1,  1,  -1, 1,  1 },
                { -1, -1, -1, -1, -1, 1,  1,  -1, 1,  1,  1,  1,  -1, 1,  1,  1,  1,  -1, 1,  1,  1,  1,  -1, 1,  1 },
                { 1,  1,  1,  1,  1,  -1, -1, 1,  -1, -1, -1, -1, 1,  -1, -1, -1, -1, 1,  -1, -1, -1, -1, 1,  -1, -1 },
                { -1, -1, -1, -1, -1, 1,  1,  -1, 1,  1,  1,  1,  -1, 1,  1,  1,  1,  -1, 1,  1,  1,  1,  -1, 1,  1 },
                { -1, -1, -1, -1, -1, 1,  1,  -1, 1,  1,  1,  1,  -1, 1,  1,  1,  1,  -1, 1,  1,  1,  1,  -1, 1,  1 },
                { -1, -1, -1, -1, -1, 1,  1,  -1, 1,  1,  1,  1,  -1, 1,  1,  1,  1,  -1, 1,  1,  1,  1,  -1, 1,  1 },
                { -1, -1, -1, -1, -1, 1,  1,  -1, 1,  1,  1,  1,  -1, 1,  1,  1,  1,  -1, 1,  1,  1,  1,  -1, 1,  1 },
                { 1,  1,  1,  1,  1,  -1, -1, 1,  -1, -1, -1, -1, 1,  -1, -1, -1, -1, 1,  -1, -1, -1, -1, 1,  -1, -1 },
                { -1, -1, -1, -1, -1, 1,  1,  -1, 1,  1,  1,  1,  -1, 1,  1,  1,  1,  -1, 1,  1,  1,  1,  -1, 1,  1 },
                { -1, -1, -1, -1, -1, 1,  1,  -1, 1,  1,  1,  1,  -1, 1,  1,  1,  1,  -1, 1,  1,  1,  1,  -1, 1,  1 },
                { -1, -1, -1, -1, -1, 1,  1,  -1, 1,  1,  1,  1,  -1, 1,  1,  1,  1,  -1, 1,  1,  1,  1,  -1, 1,  1 },
                { -1, -1, -1, -1, -1, 1,  1,  -1, 1,  1,  1,  1,  -1, 1,  1,  1,  1,  -1, 1,  1,  1,  1,  -1, 1,  1 },
                { 1,  1,  1,  1,  1,  -1, -1, 1,  -1, -1, -1, -1, 1,  -1, -1, -1, -1, 1,  -1, -1, -1, -1, 1,  -1, -1 },
                { -1, -1, -1, -1, -1, 1,  1,  -1, 1,  1,  1,  1,  -1, 1,  1,  1,  1,  -1, 1,  1,  1,  1,  -1, 1,  1 },
                { -1, -1, -1, -1, -1, 1,  1,  -1, 1,  1,  1,  1,  -1, 1,  1,  1,  1,  -1, 1,  1,  1,  1,  -1, 1,  1 }
            }, true);

            return matrixT;
        }


        private Matrix GetWeightMatrixA()
        {
            var matrixA = new Matrix(new double[,]
            {
                { 1,    1,  1,  1,  1,  1,  -1, -1, -1, 1,  1,  1,  1,  1,  1,  1,  -1, -1, -1, 1,  1,  -1, -1, -1, 1 },
                { 1,    1,  1,  1,  1,  1,  -1, -1, -1, 1,  1,  1,  1,  1,  1,  1,  -1, -1, -1, 1,  1,  -1, -1, -1, 1 },
                { 1,    1,  1,  1,  1,  1,  -1, -1, -1, 1,  1,  1,  1,  1,  1,  1,  -1, -1, -1, 1,  1,  -1, -1, -1, 1 },
                { 1,    1,  1,  1,  1,  1,  -1, -1, -1, 1,  1,  1,  1,  1,  1,  1,  -1, -1, -1, 1,  1,  -1, -1, -1, 1 },
                { 1,    1,  1,  1,  1,  1,  -1, -1, -1, 1,  1,  1,  1,  1,  1,  1,  -1, -1, -1, 1,  1,  -1, -1, -1, 1 },
                { 1,    1,  1,  1,  1,  1,  -1, -1, -1, 1,  1,  1,  1,  1,  1,  1,  -1, -1, -1, 1,  1,  -1, -1, -1, 1 },
                { -1,   -1, -1, -1, -1, -1, 1,  1,  1,  -1, -1, -1, -1, -1, -1, -1, 1,  1,  1,  -1, -1, 1,  1,  1,  -1 },
                { -1,   -1, -1, -1, -1, -1, 1,  1,  1,  -1, -1, -1, -1, -1, -1, -1, 1,  1,  1,  -1, -1, 1,  1,  1,  -1 },
                { -1,   -1, -1, -1, -1, -1, 1,  1,  1,  -1, -1, -1, -1, -1, -1, -1, 1,  1,  1,  -1, -1, 1,  1,  1,  -1 },
                { 1,    1,  1,  1,  1,  1,  -1, -1, -1, 1,  1,  1,  1,  1,  1,  1,  -1, -1, -1, 1,  1,  -1, -1, -1, 1 },
                { 1,    1,  1,  1,  1,  1,  -1, -1, -1, 1,  1,  1,  1,  1,  1,  1,  -1, -1, -1, 1,  1,  -1, -1, -1, 1 },
                { 1,    1,  1,  1,  1,  1,  -1, -1, -1, 1,  1,  1,  1,  1,  1,  1,  -1, -1, -1, 1,  1,  -1, -1, -1, 1 },
                { 1,    1,  1,  1,  1,  1,  -1, -1, -1, 1,  1,  1,  1,  1,  1,  1,  -1, -1, -1, 1,  1,  -1, -1, -1, 1 },
                { 1,    1,  1,  1,  1,  1,  -1, -1, -1, 1,  1,  1,  1,  1,  1,  1,  -1, -1, -1, 1,  1,  -1, -1, -1, 1 },
                { 1,    1,  1,  1,  1,  1,  -1, -1, -1, 1,  1,  1,  1,  1,  1,  1,  -1, -1, -1, 1,  1,  -1, -1, -1, 1 },
                { 1,    1,  1,  1,  1,  1,  -1, -1, -1, 1,  1,  1,  1,  1,  1,  1,  -1, -1, -1, 1,  1,  -1, -1, -1, 1 },
                { -1,   -1, -1, -1, -1, -1, 1,  1,  1,  -1, -1, -1, -1, -1, -1, -1, 1,  1,  1,  -1, -1, 1,  1,  1,  -1 },
                { -1,   -1, -1, -1, -1, -1, 1,  1,  1,  -1, -1, -1, -1, -1, -1, -1, 1,  1,  1,  -1, -1, 1,  1,  1,  -1 },
                { -1,   -1, -1, -1, -1, -1, 1,  1,  1,  -1, -1, -1, -1, -1, -1, -1, 1,  1,  1,  -1, -1, 1,  1,  1,  -1 },
                { 1,    1,  1,  1,  1,  1,  -1, -1, -1, 1,  1,  1,  1,  1,  1,  1,  -1, -1, -1, 1,  1,  -1, -1, -1, 1 },
                { 1,    1,  1,  1,  1,  1,  -1, -1, -1, 1,  1,  1,  1,  1,  1,  1,  -1, -1, -1, 1,  1,  -1, -1, -1, 1 },
                { -1,   -1, -1, -1, -1, -1, 1,  1,  1,  -1, -1, -1, -1, -1, -1, -1, 1,  1,  1,  -1, -1, 1,  1,  1,  -1 },
                { -1,   -1, -1, -1, -1, -1, 1,  1,  1,  -1, -1, -1, -1, -1, -1, -1, 1,  1,  1,  -1, -1, 1,  1,  1,  -1 },
                { -1,   -1, -1, -1, -1, -1, 1,  1,  1,  -1, -1, -1, -1, -1, -1, -1, 1,  1,  1,  -1, -1, 1,  1,  1,  -1 },
                { 1,    1,  1,  1,  1,  1,  -1, -1, -1, 1,  1,  1,  1,  1,  1,  1,  -1, -1, -1, 1,  1,  -1, -1, -1, 1 }
            }, true);

            return matrixA;
        }


        private Matrix GetWeightMatrixC()
        {
            var matrixC = new Matrix(new double[,]
            {
                { 1,    1,  1,  1,  1,  1,  -1, -1, -1, -1, 1,  -1, -1, -1, -1, 1,  -1, -1, -1, -1, 1,  1,  1,  1,  1 },
                { 1,    1,  1,  1,  1,  1,  -1, -1, -1, -1, 1,  -1, -1, -1, -1, 1,  -1, -1, -1, -1, 1,  1,  1,  1,  1 },
                { 1,    1,  1,  1,  1,  1,  -1, -1, -1, -1, 1,  -1, -1, -1, -1, 1,  -1, -1, -1, -1, 1,  1,  1,  1,  1 },
                { 1,    1,  1,  1,  1,  1,  -1, -1, -1, -1, 1,  -1, -1, -1, -1, 1,  -1, -1, -1, -1, 1,  1,  1,  1,  1 },
                { 1,    1,  1,  1,  1,  1,  -1, -1, -1, -1, 1,  -1, -1, -1, -1, 1,  -1, -1, -1, -1, 1,  1,  1,  1,  1 },
                { 1,    1,  1,  1,  1,  1,  -1, -1, -1, -1, 1,  -1, -1, -1, -1, 1,  -1, -1, -1, -1, 1,  1,  1,  1,  1 },
                { -1,   -1, -1, -1, -1, -1, 1,  1,  1,  1,  -1, 1,  1,  1,  1,  -1, 1,  1,  1,  1,  -1, -1, -1, -1, -1 },
                { -1,   -1, -1, -1, -1, -1, 1,  1,  1,  1,  -1, 1,  1,  1,  1,  -1, 1,  1,  1,  1,  -1, -1, -1, -1, -1 },
                { -1,   -1, -1, -1, -1, -1, 1,  1,  1,  1,  -1, 1,  1,  1,  1,  -1, 1,  1,  1,  1,  -1, -1, -1, -1, -1 },
                { -1,   -1, -1, -1, -1, -1, 1,  1,  1,  1,  -1, 1,  1,  1,  1,  -1, 1,  1,  1,  1,  -1, -1, -1, -1, -1 },
                { 1,    1,  1,  1,  1,  1,  -1, -1, -1, -1, 1,  -1, -1, -1, -1, 1,  -1, -1, -1, -1, 1,  1,  1,  1,  1 },
                { -1,   -1, -1, -1, -1, -1, 1,  1,  1,  1,  -1, 1,  1,  1,  1,  -1, 1,  1,  1,  1,  -1, -1, -1, -1, -1 },
                { -1,   -1, -1, -1, -1, -1, 1,  1,  1,  1,  -1, 1,  1,  1,  1,  -1, 1,  1,  1,  1,  -1, -1, -1, -1, -1 },
                { -1,   -1, -1, -1, -1, -1, 1,  1,  1,  1,  -1, 1,  1,  1,  1,  -1, 1,  1,  1,  1,  -1, -1, -1, -1, -1 },
                { -1,   -1, -1, -1, -1, -1, 1,  1,  1,  1,  -1, 1,  1,  1,  1,  -1, 1,  1,  1,  1,  -1, -1, -1, -1, -1 },
                { 1,    1,  1,  1,  1,  1,  -1, -1, -1, -1, 1,  -1, -1, -1, -1, 1,  -1, -1, -1, -1, 1,  1,  1,  1,  1 },
                { -1,   -1, -1, -1, -1, -1, 1,  1,  1,  1,  -1, 1,  1,  1,  1,  -1, 1,  1,  1,  1,  -1, -1, -1, -1, -1 },
                { -1,   -1, -1, -1, -1, -1, 1,  1,  1,  1,  -1, 1,  1,  1,  1,  -1, 1,  1,  1,  1,  -1, -1, -1, -1, -1 },
                { -1,   -1, -1, -1, -1, -1, 1,  1,  1,  1,  -1, 1,  1,  1,  1,  -1, 1,  1,  1,  1,  -1, -1, -1, -1, -1 },
                { -1,   -1, -1, -1, -1, -1, 1,  1,  1,  1,  -1, 1,  1,  1,  1,  -1, 1,  1,  1,  1,  -1, -1, -1, -1, -1 },
                { 1,    1,  1,  1,  1,  1,  -1, -1, -1, -1, 1,  -1, -1, -1, -1, 1,  -1, -1, -1, -1, 1,  1,  1,  1,  1 },
                { 1,    1,  1,  1,  1,  1,  -1, -1, -1, -1, 1,  -1, -1, -1, -1, 1,  -1, -1, -1, -1, 1,  1,  1,  1,  1 },
                { 1,    1,  1,  1,  1,  1,  -1, -1, -1, -1, 1,  -1, -1, -1, -1, 1,  -1, -1, -1, -1, 1,  1,  1,  1,  1 },
                { 1,    1,  1,  1,  1,  1,  -1, -1, -1, -1, 1,  -1, -1, -1, -1, 1,  -1, -1, -1, -1, 1,  1,  1,  1,  1 },
                { 1,    1,  1,  1,  1,  1,  -1, -1, -1, -1, 1,  -1, -1, -1, -1, 1,  -1, -1, -1, -1, 1,  1,  1,  1,  1 }
            }, true);

            return matrixC;
        }

        private Matrix GetWeightMatrixTAC()
        {
            var matrixTAC = new Matrix(new double[,]
            {
                { 3,  3,   3,  3,  3,  1, -3, -1, -3, -1,  1, -1,  1, -1, -1,  1, -3, -1, -3, -1,  1, -1,  1, -1,  1 },
                { 3,  3,   3,  3,  3,  1, -3, -1, -3, -1,  1, -1,  1, -1, -1,  1, -3, -1, -3, -1,  1, -1,  1, -1,  1 },
                { 3,  3,   3,  3,  3,  1, -3, -1, -3, -1,  1, -1,  1, -1, -1,  1, -3, -1, -3, -1,  1, -1,  1, -1,  1 },
                { 3,  3,   3,  3,  3,  1, -3, -1, -3, -1,  1, -1,  1, -1, -1,  1, -3, -1, -3, -1,  1, -1,  1, -1,  1 },
                { 3,  3,   3,  3,  3,  1, -3, -1, -3, -1,  1, -1,  1, -1, -1,  1, -3, -1, -3, -1,  1, -1,  1, -1,  1 },
                { 1,  1,   1,  1,  1,  3, -1, -3, -1,  1,  3,  1, -1,  1,  1,  3, -1, -3, -1,  1,  3,  1, -1,  1,  3 },
                {-3, -3,  -3, -3, -3, -1,  3,  1,  3,  1, -1,  1, -1,  1,  1, -1,  3,  1,  3,  1, -1,  1, -1,  1, -1 },
                {-1, -1,  -1, -1, -1, -3,  1,  3,  1, -1, -3, -1,  1, -1, -1, -3,  1,  3,  1, -1, -3, -1,  1, -1, -3 },
                {-3, -3,  -3, -3, -3, -1,  3,  1,  3,  1, -1,  1, -1,  1,  1, -1,  3,  1,  3,  1, -1,  1, -1,  1, -1 },
                {-1, -1,  -1, -1, -1,  1,  1, -1,  1,  3,  1,  3,  1,  3,  3,  1,  1, -1,  1,  3,  1, -1, -3, -1,  1 },
                { 1,  1,   1, 1,   1,  3, -1, -3, -1,  1,  3,  1, -1,  1,  1,  3, -1, -3, -1,  1,  3,  1, -1,  1,  3 },
                {-1, -1,  -1, -1, -1,  1,  1, -1,  1,  3,  1,  3,  1,  3,  3,  1,  1, -1,  1,  3,  1, -1, -3, -1,  1 },
                { 1,  1,   1, 1,  1,  -1, -1,  1, -1,  1, -1,  1,  3,  1,  1, -1, -1,  1, -1,  1, -1, -3, -1, -3, -1 },
                {-1, -1,  -1, -1, -1,  1,  1, -1,  1,  3,  1,  3,  1,  3,  3,  1,  1, -1,  1,  3,  1, -1, -3, -1,  1 },
                {-1, -1,  -1, -1, -1,  1,  1, -1,  1,  3,  1,  3,  1,  3,  3,  1,  1, -1,  1,  3,  1, -1, -3, -1,  1 },
                { 1,  1,   1, 1,  1,   3, -1, -3, -1,  1,  3,  1, -1,  1,  1,  3, -1, -3, -1,  1,  3,  1, -1,  1,  3  },
                {-3, -3,  -3, -3, -3, -1,  3,  1,  3,  1, -1,  1, -1,  1,  1, -1,  3,  1,  3,  1, -1,  1, -1,  1, -1 },
                {-1, -1,  -1, -1, -1, -3,  1,  3,  1, -1, -3, -1,  1, -1, -1, -3,  1,  3,  1, -1, -3, -1,  1, -1, -3 },
                {-3, -3,  -3, -3, -3, -1,  3,  1,  3,  1, -1,  1, -1,  1,  1, -1,  3,  1,  3,  1, -1,  1, -1,  1, -1 },
                {-1, -1,  -1, -1, -1,  1,  1, -1,  1,  3,  1,  3,  1,  3,  3,  1,  1, -1,  1,  3,  1, -1, -3, -1,  1 },
                { 1,  1,   1, 1,  1,   3, -1, -3, -1,  1,  3,  1, -1,  1,  1,  3, -1, -3, -1,  1,  3,  1, -1,  1,  3 },
                {-1, -1,  -1, -1, -1,  1,  1, -1,  1, -1,  1, -1, -3, -1, -1,  1,  1, -1,  1, -1,  1,  3,  1,  3,  1 },
                { 1,  1,   1, 1,  1,  -1, -1,  1, -1, -3, -1, -3, -1, -3, -3, -1, -1,  1, -1, -3, -1,  1,  3,  1, -1 },
                {-1, -1,  -1, -1, -1,  1,  1, -1,  1, -1,  1, -1, -3, -1, -1,  1,  1, -1,  1, -1,  1,  3,  1,  3,  1 },
                { 1,  1,   1, 1,  1,   3, -1, -3, -1,  1,  3,  1, -1,  1,  1,  3, -1, -3, -1,  1,  3,  1, -1,  1,  3 }

            }, true);

            return matrixTAC;
        }

    }
}
